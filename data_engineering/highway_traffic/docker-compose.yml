x-spark-common: &spark-common
  # image: bitnami/spark:3.5.0
  build:
    context: .
    dockerfile: Dockerfile.spark
  volumes:
    - ./scripts:/opt/bitnami/spark/scripts
    - ./mnt/checkpoints:/mnt/spark-checkpoints
    - ./mnt/spark-state:/mnt/spark-state
  dns:
      - 127.0.0.11
      - 8.8.8.8
  networks:
    - highway_network

services:
  main:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: main_service
    volumes:
      - ./requirements.txt:/app/requirements.txt
      - ./scripts/yolo_test.py:/app/yolo_test.py
    working_dir: /app
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - highway_network
    depends_on:
      - kafka-broker-1
    command: tail -f /dev/null
  
  kafka-controller-1:
    image: apache/kafka:3.8.1
    container_name: kafka-controller-1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093 #,2@kafka-controller-2:9093,3@kafka-controller-3:9093
      KAFKA_CLUSTER_ID: abcdef1234567890
    networks:
      - highway_network
    volumes:
      - controller_data_1:/var/lib/kafka/data

  # kafka-controller-2:
  #   image: apache/kafka:3.8.1
  #   container_name: kafka-controller-2
  #   environment:
  #     KAFKA_NODE_ID: 2
  #     KAFKA_PROCESS_ROLES: controller
  #     KAFKA_LISTENERS: CONTROLLER://:9093
  #     KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     # KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
  #     KAFKA_CLUSTER_ID: abcdef1234567890
  #   networks:
  #     - highway_network
  #   volumes:
  #     - controller_data_2:/var/lib/kafka/data

  # kafka-controller-3:
  #   image: apache/kafka:3.8.1
  #   container_name: kafka-controller-3
  #   environment:
  #     KAFKA_NODE_ID: 3
  #     KAFKA_PROCESS_ROLES: controller
  #     KAFKA_LISTENERS: CONTROLLER://:9093
  #     KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     # KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
  #     KAFKA_CLUSTER_ID: abcdef1234567890
  #   networks:
  #     - highway_network
  #   volumes:
  #     - controller_data_3:/var/lib/kafka/data

  kafka-broker-1:
    image: apache/kafka:3.8.1
    container_name: kafka-broker-1
    ports:
      - "29092:9092"
    environment:
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092
      KAFKA_LISTENERS_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093 #,2@kafka-controller-2:9093,3@kafka-controller-3:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1 
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 
      KAFKA_CLUSTER_ID: abcdef1234567890
    depends_on:
      - kafka-controller-1
      # - kafka-controller-2
      # - kafka-controller-3
    networks:
      - highway_network
    volumes:
      - broker_data_1:/var/lib/kafka/data

  # kafka-broker-2:
  #   image: apache/kafka:3.8.1
  #   container_name: kafka-broker-2
  #   ports:
  #     - "39092:9092"
  #   environment:
  #     KAFKA_NODE_ID: 5
  #     KAFKA_PROCESS_ROLES: broker
  #     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:9092
  #     KAFKA_LISTENERS_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
  #     KAFKA_DEFAULT_REPLICATION_FACTOR: 3
  #     KAFKA_MIN_INSYNC_REPLICAS: 2 
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2 
  #     KAFKA_CLUSTER_ID: abcdef1234567890
  #   depends_on:
  #     - kafka-controller-1
  #     - kafka-controller-2
  #     - kafka-controller-3
  #   networks:
  #     - highway_network
  #   volumes:
  #     - broker_data_2:/var/lib/kafka/data

  # kafka-broker-3:
  #   image: apache/kafka:3.8.1
  #   container_name: kafka-broker-3
  #   ports:
  #     - "49092:9092"
  #   environment:
  #     KAFKA_NODE_ID: 6
  #     KAFKA_PROCESS_ROLES: broker
  #     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-3:9092
  #     KAFKA_LISTENERS_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
  #     KAFKA_DEFAULT_REPLICATION_FACTOR: 3
  #     KAFKA_MIN_INSYNC_REPLICAS: 2 
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2 
  #     KAFKA_CLUSTER_ID: abcdef1234567890
  #   depends_on:
  #     - kafka-controller-1
  #     - kafka-controller-2
  #     - kafka-controller-3
  #   networks:
  #     - highway_network
  #   volumes:
  #     - broker_data_3:/var/lib/kafka/data

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.1
    container_name: schema-registry
    ports:
      - "18081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-broker-1:9092 #,PLAINTEXT://kafka-broker-2:9092,PLAINTEXT://kafka-broker-3:9092
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 3
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - kafka-broker-1
      # - kafka-broker-2
      # - kafka-broker-3
    networks:
      - highway_network

  console:
    image: docker.redpanda.com/redpandadata/console:v2.5.2
    container_name: kafka-console
    entrypoint: /bin/sh
    command: >
      -c 'sleep 15; echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yaml; /app/console'
    ports:
      - "8080:8080"
    environment:
      - KAFKA_BROKERS=kafka-broker-1:9092 #,kafka-broker-2:9092,kafka-broker-3:9092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
    depends_on:
      - schema-registry
    networks:
      - highway_network

  spark-master:
    <<: *spark-common
    container_name: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"
      - "7077:7077"
      - "4040:4040"
      - "8081:8081"
    dns:
      - 127.0.0.11
      - 8.8.8.8

  spark-worker-1:
    <<: *spark-common
    container_name: spark-worker-1
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2G
      SPARK_MASTER_URL: spark://spark-master:7077

  spark-worker-2:
    <<: *spark-common
    container_name: spark-worker-2
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master

  spark-worker-3:
    <<: *spark-common
    container_name: spark-worker-3
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master

  postgres: # New PostgreSQL service
      image: postgres:14 # Using a specific version is good practice, you can use 'latest'
      container_name: highway-postgres-instance
      ports:
        - "5432:5432"
      networks:
        - highway_network
      volumes:
        - postgres_data:/var/lib/postgresql/data # Persistent data for PostgreSQL
      environment:
        POSTGRES_USER: 'spark_user' # Or your desired username
        POSTGRES_PASSWORD: 'spark_password' # Or your desired password
        POSTGRES_DB: 'highway_traffic' # Or your desired database name
      restart: always
      deploy:
        resources:
          limits:
            memory: 2G # Adjust as needed
  
  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.9.0
    platform: linux/amd64
    container_name: dbt_highway_psql_app
    networks:
      - highway_network
    volumes:
      - ./dbt_highway_psql:/dbt
    working_dir: /dbt
    environment:
      DBT_PROFILE: dbt_highway_psql
      DBT_TARGET: dev
      DBT_PROFILES_DIR: /dbt
    depends_on:
      - postgres

networks:
  highway_network:
    driver: bridge

volumes: 
  postgres_data:
  broker_data_1:
  # broker_data_2:
  # broker_data_3:
  controller_data_1:
  # controller_data_2:
  # controller_data_3: